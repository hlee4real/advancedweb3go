// results, err := collection.Find(context.Background(), bson.M{
		// 	"user": address,
		// 	"type": "response",
		// })

		// if err != nil {
		// 	c.JSON(http.StatusInternalServerError, APIResponse{Message: "Error", Code: 1, Data: nil})
		// 	return
		// }
		// for results.Next(context.Background()) {
		// 	var event bson.M
		// 	err := results.Decode(&event)
		// 	if err != nil {
		// 		c.JSON(http.StatusInternalServerError, APIResponse{Message: "Error", Code: 1, Data: nil})
		// 		return
		// 	}
		// 	events = append(events, event)
		// }
		// var final string
		// var prizes []int64
		// var count0, count1, count2, count3, count4, count5, count6, count7 float64
		// for _, event := range events {
		// 	if event["user"] == strings.ToLower(c.Param("address")) && event["type"] == "response" {
		// 		//get all prizeId, its an array, then store in prizes
		// 		//print type of event["prize"]

		// 		//convert interface to primitiveA
		// 		prize := event["prize"].(primitive.A)
		// 		for _, v := range prize {
		// 			prizes = append(prizes, v.(int64))
		// 		}
		// 		for _, v := range prizes {
		// 			switch v {
		// 			case 0:
		// 				count0++
		// 			case 1:
		// 				count1 += 0.1
		// 			case 2:
		// 				count2++
		// 			case 3:
		// 				count3 += 0.25
		// 			case 4:
		// 				count4 += 2
		// 			case 5:
		// 				count5 += 0.5
		// 			case 6:
		// 				count6 += 0.15
		// 			case 7:
		// 				count7 += 2.5
		// 			default:
		// 				fmt.Println("No prize")
		// 			}
		// 		}
		// 	}
		// }
		// totalSpin := count2 + count4
		// totalGafi := count1 + count3 + count5 + count6 + count7
		// final = fmt.Sprintf("Spin: %v, Gafi: %v", totalSpin, totalGafi)